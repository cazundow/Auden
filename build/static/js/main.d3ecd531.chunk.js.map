{"version":3,"sources":["RepoTable.js","SearchResults.js","IssueTable.js","DetailsModal.js","App.js","serviceWorker.js","index.js"],"names":["RepoTable","items","handleShow","className","scope","map","item","i","key","id","onClick","name","forks_count","open_issues","SearchResults","setShow","setModalData","open_issues_count","IssueTable","issues","number","title","href","html_url","DetailsModal","modalData","show","handleClose","useState","setIssues","url","useEffect","getIssues","a","console","log","fetch","response","json","data","Modal","onHide","Header","closeButton","Title","Body","description","Footer","Button","variant","App","repo","setRepo","search","setSearch","query","setQuery","recents","setRecents","rated","setRated","ratedResponse","data2","getreposLists","sendSearch","toggleBox","document","getElementById","length","response2","resultsBox","classList","toggle","setTimeout","value","onChange","e","target","type","preventDefault","slice","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3ecd531.chunk.js","sourcesContent":["import React from 'react'; \n\nconst RepoTable = ({items, handleShow}) => {\n\n   \n    if(!items){\n        return null\n    }\n    else{\n    return(\n        \n        <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Repo Name</th>\n                <th scope=\"col\">Forks</th>\n                <th scope=\"col\">Issues</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n            items.map( (item, i) =>\n            <tr key={item.id} onClick={handleShow}>\n                <th scope=\"row\">{i + 1}</th>\n                <td> \n                <p key={i}>{item.name}</p>\n                </td>\n                <td> <p>{item.forks_count}</p></td>\n                <td> <p>{item.open_issues}</p></td>\n            </tr>\n            )\n            }\n            </tbody>\n        </table>\n    )\n    }\n}\n\nexport default RepoTable ;","import React from 'react'; \n\nconst SearchResults = ({items, setShow, setModalData}) => {\n\n   \n    if(!items){\n        return null\n    }\n    else{\n    return(\n            items.map( (item, i) =>\n            <tr className='pointer' key={item.id} id={item.id} onClick={() => {setModalData(item); setShow(true)}}>\n                <th scope=\"row\">{i + 1}</th>\n                <td> \n                <p key={i}>{item.name}</p>\n                </td>\n                <td> <p>{item.forks_count}</p></td>\n                <td> <p>{item.open_issues_count}</p></td>\n            </tr>\n            )\n        \n    )\n    }\n}\n\nexport default SearchResults ;","import React from 'react'; \n\nconst IssueTable = ({issues}) => {\n\n   \n    if(!issues){\n        return null\n    }\n    else{\n    return(\n        <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\">Issue #</th>\n                <th scope=\"col\">Repo Name</th>\n                <th scope=\"col\">open</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n            issues.map( (item, i) =>\n            <tr key={item.id}>\n                <th scope=\"row\">{item.number}</th>\n                <td> \n                <p key={i}>{item.title}</p>\n                </td>\n                <td> <a href={item.html_url}>View</a></td>\n            </tr>\n            )\n            }\n            </tbody>\n        </table>\n      )\n    }\n}\n\nexport default IssueTable;","import React, {useState, useEffect} from 'react'; \nimport {Button, Modal} from 'react-bootstrap';\nimport IssueTable from \"./IssueTable\";\n\nconst DetailsModal = ({modalData, show, handleClose}) => {\n    const [issues, setIssues] = useState([]); \n    const [url, setUrl] = useState(\"\"); \n\n    useEffect(() => {\n          getIssues();\n\n    }, [modalData])\n    //get the issues\n    const getIssues = (async () => {\n\n        console.log(url);\n        const response = await fetch(`${modalData.url}/issues`); \n        const data = await response.json();\n        setIssues(data);\n      })\n    return(\n        <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n        <Modal.Title>{modalData.name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            {modalData.description}\n            {\n                <IssueTable issues = {issues}/>\n            }\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n        \n    )\n    \n}\n\nexport default DetailsModal ;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport RepoTable from './RepoTable'; \nimport SearchResults from './SearchResults'; \nimport DetailsModal from './DetailsModal';\n\nconst App = () => {\n\n  const [repo, setRepo] = useState([]); \n  const [search, setSearch] = useState('tetris');\n  const [query, setQuery] = useState('tetris'); \n  const [recents, setRecents] = useState([]); \n  const [rated, setRated] = useState([]); \n  const [show, setShow] = useState(false);\n  const [modalData, setModalData] = useState({}); \n\n\n  useEffect(() => {\n    const getreposLists = async () => {\n      // here we'll want to request the data we need and save them to state. we only need this to run once on load \n      const response = await fetch(`https://api.github.com/search/repositories?q=sort=updated&order=desc`); \n      const data = await response.json(); \n      setRecents(data.items);\n      const ratedResponse =  await fetch(`https://api.github.com/search/repositories?q=sort=rated&order=desc`);\n      const data2 =  await ratedResponse.json(); \n      setRated(data2.items)\n    }\n    getreposLists();\n  }, [0]);\n\n  //we need this to run each time the query state changes, this only happens when the form btnn is pressed. see onclick on the form btn \n\n  useEffect(() => {\n    sendSearch();\n    toggleBox();\n  }, [query]);\n  \n  //the idea hear is to take the user input and try find a list of repos \n  const sendSearch = async () => {\n    var label = document.getElementById(\"search-results-label\");  \n    const response = await fetch(`https://api.github.com/search/repositories?q=${query}+&sort=stars&order=asc`); \n    const data = await response.json();\n\n    if(data.items.length >  0){\n      setRepo(data.items);\n      console.log(data.items)\n    }else {\n      const response2 =  await fetch(`https://api.github.com/users/${query}/repos`);\n      const data2 =  await response2.json(); \n      console.log(data2);\n      setRepo(data2)\n    }\n      \n    \n     \n  }\n\n  //captrure input field values and assign to search state\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  }\n\n  // we don't want to make an api call each time someone enters a new char in our text field so we're saving those values to the search state and only search when the form button is pressed \n  // this will then copy the contents of search to query, which triggers use effects to go fetch data and update our view\n  const getSearch = e =>{\n    e.preventDefault(); \n\n    setQuery(search)\n  }\n  // flash a red border to incicate results have changed \n  const toggleBox = () => {\n    var resultsBox = document.getElementById(\"search-results\"); \n    resultsBox.classList.toggle(\"flash\");\n    setTimeout( () =>{ \n      resultsBox.classList.toggle(\"flash\");\n    }, 2000);\n  };\n  const handleClose = (e) => {\n    setShow(false);\n  }\n  const handleShow = (e) => {\n    setShow(true)\n  };\nconst setModal = (e) => {\n  console.log(e.target.className);\n  //setModalData(repo.find(x => x.id == e.target.id));\n\n // setShow(true);\n};\n  return (\n    <div className='App'>\n      <form className='search-form'>\n        <input className='search-bar' value= {search} onChange={updateSearch} type='text'/>\n        <button className='search-button' onClick={getSearch} type='submit'><span> </span>Search</button>\n      </form>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n        <div className=\"col-sm-12\" id=\"search-results\">\n            <h2 id=\"search-results-label\">Search results</h2>\n            <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Repo Name</th>\n                <th scope=\"col\">Forks</th>\n                <th scope=\"col\">Issues</th>\n\n            </tr>\n            </thead>\n            <tbody>\n            <SearchResults items={repo.slice(0, 10)} setShow={setShow} setModalData={setModalData} />\n            </tbody>\n        </table>\n          </div>\n          <div className=\"col-sm-12 col-md-6\">\n            <h2>Top Rated</h2>\n            <RepoTable items = {rated.slice(0, 10)} />\n          </div>\n          <div className=\"col-sm-12 col-md-6\">\n            <h2>Most Recent</h2>\n            <RepoTable items = {recents.slice(0, 10)} />\n          </div>\n       </div>\n      </div>\n        \n    <div>\n      <DetailsModal modalData={modalData} show={show} handleClose={handleClose}/>\n    </div>\n      \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
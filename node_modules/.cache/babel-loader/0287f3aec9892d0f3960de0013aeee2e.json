{"ast":null,"code":"import _regeneratorRuntime from\"/Users/caleb.azundow/Documents/Auden/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/caleb.azundow/Documents/Auden/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/caleb.azundow/Documents/Auden/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import'./App.css';import RepoTable from'./RepoTable';import SearchResults from'./SearchResults';import DetailsModal from'./DetailsModal';var App=function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),repo=_useState2[0],setRepo=_useState2[1];var _useState3=useState('tetris'),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];var _useState5=useState('tetris'),_useState6=_slicedToArray(_useState5,2),query=_useState6[0],setQuery=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),recents=_useState8[0],setRecents=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),rated=_useState10[0],setRated=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),show=_useState12[0],setShow=_useState12[1];var _useState13=useState({}),_useState14=_slicedToArray(_useState13,2),modalData=_useState14[0],setModalData=_useState14[1];useEffect(function(){var getreposLists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data,ratedResponse,data2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.github.com/search/repositories?q=sort=updated&order=desc\");case 2:response=_context.sent;_context.next=5;return response.json();case 5:data=_context.sent;setRecents(data.items);_context.next=9;return fetch(\"https://api.github.com/search/repositories?q=sort=rated&order=desc\");case 9:ratedResponse=_context.sent;_context.next=12;return ratedResponse.json();case 12:data2=_context.sent;setRated(data2.items);case 14:case\"end\":return _context.stop();}}},_callee);}));return function getreposLists(){return _ref.apply(this,arguments);};}();getreposLists();},[0]);//we need this to run each time the query state changes, this only happens when the form btnn is pressed. see onclick on the form btn \nuseEffect(function(){sendSearch();toggleBox();},[query]);//the idea hear is to take the user input and try find a list of repos \nvar sendSearch=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var label,response,data,response2,data2;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:label=document.getElementById(\"search-results-label\");_context2.next=3;return fetch(\"https://api.github.com/search/repositories?q=\".concat(query,\"+&sort=stars&order=asc\"));case 3:response=_context2.sent;_context2.next=6;return response.json();case 6:data=_context2.sent;if(!(data.items.length>0)){_context2.next=12;break;}setRepo(data.items);console.log(data.items);_context2.next=20;break;case 12:_context2.next=14;return fetch(\"https://api.github.com/users/\".concat(query,\"/repos\"));case 14:response2=_context2.sent;_context2.next=17;return response2.json();case 17:data2=_context2.sent;console.log(data2);setRepo(data2);case 20:case\"end\":return _context2.stop();}}},_callee2);}));return function sendSearch(){return _ref2.apply(this,arguments);};}();//captrure input field values and assign to search state\nvar updateSearch=function updateSearch(e){setSearch(e.target.value);};// we don't want to make an api call each time someone enters a new char in our text field so we're saving those values to the search state and only search when the form button is pressed \n// this will then copy the contents of search to query, which triggers use effects to go fetch data and update our view\nvar getSearch=function getSearch(e){e.preventDefault();setQuery(search);};// flash a red border to incicate results have changed \nvar toggleBox=function toggleBox(){var resultsBox=document.getElementById(\"search-results\");resultsBox.classList.toggle(\"flash\");setTimeout(function(){resultsBox.classList.toggle(\"flash\");},2000);};var handleClose=function handleClose(e){setShow(false);};var handleShow=function handleShow(e){setShow(true);};var setModal=function setModal(e){console.log(e.target.className);//setModalData(repo.find(x => x.id == e.target.id));\n// setShow(true);\n};return React.createElement(\"div\",{className:\"App\"},React.createElement(\"form\",{className:\"search-form\"},React.createElement(\"input\",{className:\"search-bar\",value:search,onChange:updateSearch,type:\"text\"}),React.createElement(\"button\",{className:\"search-button\",onClick:getSearch,type:\"submit\"},React.createElement(\"span\",null,\" \"),\"Search\")),React.createElement(\"div\",{className:\"container-fluid\"},React.createElement(\"div\",{className:\"row\"},React.createElement(\"div\",{className:\"col-sm-12\",id:\"search-results\"},React.createElement(\"h2\",{id:\"search-results-label\"},\"Search results\"),React.createElement(\"table\",{className:\"table\"},React.createElement(\"thead\",null,React.createElement(\"tr\",null,React.createElement(\"th\",{scope:\"col\"},\"#\"),React.createElement(\"th\",{scope:\"col\"},\"Repo Name\"),React.createElement(\"th\",{scope:\"col\"},\"Forks\"),React.createElement(\"th\",{scope:\"col\"},\"Issues\"))),React.createElement(\"tbody\",null,React.createElement(SearchResults,{items:repo.slice(0,10),setShow:setShow,setModalData:setModalData})))),React.createElement(\"div\",{className:\"col-sm-12 col-md-6\"},React.createElement(\"h2\",null,\"Top Rated\"),React.createElement(RepoTable,{items:rated.slice(0,10)})),React.createElement(\"div\",{className:\"col-sm-12 col-md-6\"},React.createElement(\"h2\",null,\"Most Recent\"),React.createElement(RepoTable,{items:recents.slice(0,10)})))),React.createElement(\"div\",null,React.createElement(DetailsModal,{modalData:modalData,show:show,handleClose:handleClose})));};export default App;","map":{"version":3,"sources":["/Users/caleb.azundow/Documents/Auden/src/App.js"],"names":["React","useEffect","useState","RepoTable","SearchResults","DetailsModal","App","repo","setRepo","search","setSearch","query","setQuery","recents","setRecents","rated","setRated","show","setShow","modalData","setModalData","getreposLists","fetch","response","json","data","items","ratedResponse","data2","sendSearch","toggleBox","label","document","getElementById","length","console","log","response2","updateSearch","e","target","value","getSearch","preventDefault","resultsBox","classList","toggle","setTimeout","handleClose","handleShow","setModal","className","slice"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport RepoTable from './RepoTable'; \nimport SearchResults from './SearchResults'; \nimport DetailsModal from './DetailsModal';\n\nconst App = () => {\n\n  const [repo, setRepo] = useState([]); \n  const [search, setSearch] = useState('tetris');\n  const [query, setQuery] = useState('tetris'); \n  const [recents, setRecents] = useState([]); \n  const [rated, setRated] = useState([]); \n  const [show, setShow] = useState(false);\n  const [modalData, setModalData] = useState({}); \n\n\n  useEffect(() => {\n    const getreposLists = async () => {\n      // here we'll want to request the data we need and save them to state. we only need this to run once on load \n      const response = await fetch(`https://api.github.com/search/repositories?q=sort=updated&order=desc`); \n      const data = await response.json(); \n      setRecents(data.items);\n      const ratedResponse =  await fetch(`https://api.github.com/search/repositories?q=sort=rated&order=desc`);\n      const data2 =  await ratedResponse.json(); \n      setRated(data2.items)\n    }\n    getreposLists();\n  }, [0]);\n\n  //we need this to run each time the query state changes, this only happens when the form btnn is pressed. see onclick on the form btn \n\n  useEffect(() => {\n    sendSearch();\n    toggleBox();\n  }, [query]);\n  \n  //the idea hear is to take the user input and try find a list of repos \n  const sendSearch = async () => {\n    var label = document.getElementById(\"search-results-label\");  \n    const response = await fetch(`https://api.github.com/search/repositories?q=${query}+&sort=stars&order=asc`); \n    const data = await response.json();\n\n    if(data.items.length >  0){\n      setRepo(data.items);\n      console.log(data.items)\n    }else {\n      const response2 =  await fetch(`https://api.github.com/users/${query}/repos`);\n      const data2 =  await response2.json(); \n      console.log(data2);\n      setRepo(data2)\n    }\n      \n    \n     \n  }\n\n  //captrure input field values and assign to search state\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  }\n\n  // we don't want to make an api call each time someone enters a new char in our text field so we're saving those values to the search state and only search when the form button is pressed \n  // this will then copy the contents of search to query, which triggers use effects to go fetch data and update our view\n  const getSearch = e =>{\n    e.preventDefault(); \n\n    setQuery(search)\n  }\n  // flash a red border to incicate results have changed \n  const toggleBox = () => {\n    var resultsBox = document.getElementById(\"search-results\"); \n    resultsBox.classList.toggle(\"flash\");\n    setTimeout( () =>{ \n      resultsBox.classList.toggle(\"flash\");\n    }, 2000);\n  };\n  const handleClose = (e) => {\n    setShow(false);\n  }\n  const handleShow = (e) => {\n    setShow(true)\n  };\nconst setModal = (e) => {\n  console.log(e.target.className);\n  //setModalData(repo.find(x => x.id == e.target.id));\n\n // setShow(true);\n};\n  return (\n    <div className='App'>\n      <form className='search-form'>\n        <input className='search-bar' value= {search} onChange={updateSearch} type='text'/>\n        <button className='search-button' onClick={getSearch} type='submit'><span> </span>Search</button>\n      </form>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n        <div className=\"col-sm-12\" id=\"search-results\">\n            <h2 id=\"search-results-label\">Search results</h2>\n            <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Repo Name</th>\n                <th scope=\"col\">Forks</th>\n                <th scope=\"col\">Issues</th>\n\n            </tr>\n            </thead>\n            <tbody>\n            <SearchResults items={repo.slice(0, 10)} setShow={setShow} setModalData={setModalData} />\n            </tbody>\n        </table>\n          </div>\n          <div className=\"col-sm-12 col-md-6\">\n            <h2>Top Rated</h2>\n            <RepoTable items = {rated.slice(0, 10)} />\n          </div>\n          <div className=\"col-sm-12 col-md-6\">\n            <h2>Most Recent</h2>\n            <RepoTable items = {recents.slice(0, 10)} />\n          </div>\n       </div>\n      </div>\n        \n    <div>\n      <DetailsModal modalData={modalData} show={show} handleClose={handleClose}/>\n    </div>\n      \n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/caleb.azundow/Documents/Auden/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport RepoTable from './RepoTable';\nimport SearchResults from './SearchResults';\nimport { Button, Modal } from 'react-bootstrap';\n\nconst App = () => {\n  const [repo, setRepo] = useState([]);\n  const [search, setSearch] = useState('tetris');\n  const [query, setQuery] = useState('tetris');\n  const [recents, setRecents] = useState([]);\n  const [rated, setRated] = useState([]);\n  const [show, setShow] = useState(false);\n  const newContext = React.createContext({\n    show: false\n  });\n  useEffect(() => {\n    const getreposLists = async () => {\n      // here we'll want to request the data we need and save them to state. we only need this to run once on load \n      const response = await fetch(`https://api.github.com/search/repositories?q=sort=updated&order=desc`);\n      const data = await response.json();\n      setRecents(data.items);\n      const ratedResponse = await fetch(`https://api.github.com/search/repositories?q=sort=rated&order=desc`);\n      const data2 = await ratedResponse.json();\n      setRated(data2.items);\n    };\n\n    getreposLists();\n  }, [0]); //we need this to run each time the query state changes, this only happens when the form btnn is pressed. see onclick on the form btn \n\n  useEffect(() => {\n    sendSearch();\n    toggleBox();\n  }, [query]); //the idea hear is to take the user input and try find a list of repos \n\n  const sendSearch = async () => {\n    var label = document.getElementById(\"search-results-label\");\n    const response = await fetch(`https://api.github.com/search/repositories?q=${query}+&sort=stars&order=desc`);\n    const data = await response.json();\n    setRepo(data.items);\n  }; //captrure input field values and assign to search state\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }; // we don't want to make an api call each time someone enters a new char in our text field so we're saving those values to the search state and only search when the form button is pressed \n  // this will then copy the contents of search to query, which triggers use effects to go fetch data and update our view\n\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  }; // flash a red border to incicate results have changed \n\n\n  const toggleBox = () => {\n    var resultsBox = document.getElementById(\"search-results\");\n    resultsBox.classList.toggle(\"flash\");\n    setTimeout(() => {\n      resultsBox.classList.toggle(\"flash\");\n    }, 2000);\n  };\n\n  const handleClose = e => {\n    setShow(false);\n  };\n\n  const handleShow = e => {\n    setShow(true);\n    console.log(\"wooh\");\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"search-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"search-bar\",\n    value: search,\n    onChange: updateSearch,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"search-button\",\n    onClick: getSearch,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \" \"), \"Search\")), React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-4\",\n    id: \"search-results\",\n    onClick: handleShow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"search-results-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Search results\"), React.createElement(\"table\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"#\"), React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Repo Name\"), React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Forks\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(RepoTable, {\n    items: repo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Top Rated\"), React.createElement(RepoTable, {\n    items: rated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Most Recent\"), React.createElement(RepoTable, {\n    items: recents,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    show: show,\n    onHide: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Modal heading\")), React.createElement(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Woohoo, you're reading this text in a modal!\"), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Close\"), React.createElement(Button, {\n    variant: \"primary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Save Changes\")))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/caleb.azundow/Documents/Auden/src/App.js"],"names":["React","useEffect","useState","RepoTable","SearchResults","Button","Modal","App","repo","setRepo","search","setSearch","query","setQuery","recents","setRecents","rated","setRated","show","setShow","newContext","createContext","getreposLists","response","fetch","data","json","items","ratedResponse","data2","sendSearch","toggleBox","label","document","getElementById","updateSearch","e","target","value","getSearch","preventDefault","resultsBox","classList","toggle","setTimeout","handleClose","handleShow","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport RepoTable from './RepoTable'; \nimport SearchResults from './SearchResults'; \nimport {Button, Modal} from 'react-bootstrap';\n\nconst App = () => {\n\n  const [repo, setRepo] = useState([]); \n  const [search, setSearch] = useState('tetris');\n  const [query, setQuery] = useState('tetris'); \n  const [recents, setRecents] = useState([]); \n  const [rated, setRated] = useState([]); \n  const [show, setShow] = useState(false);\n\n  const newContext = React.createContext({ show: false });\n\n\n  useEffect(() => {\n    const getreposLists = async () => {\n      // here we'll want to request the data we need and save them to state. we only need this to run once on load \n      const response = await fetch(`https://api.github.com/search/repositories?q=sort=updated&order=desc`); \n      const data = await response.json(); \n      setRecents(data.items);\n      const ratedResponse =  await fetch(`https://api.github.com/search/repositories?q=sort=rated&order=desc`);\n      const data2 =  await ratedResponse.json(); \n      setRated(data2.items)\n    }\n    getreposLists();\n  }, [0]);\n\n  //we need this to run each time the query state changes, this only happens when the form btnn is pressed. see onclick on the form btn \n\n  useEffect(() => {\n    sendSearch();\n    toggleBox();\n  }, [query]);\n  \n  //the idea hear is to take the user input and try find a list of repos \n  const sendSearch = async () => {\n    var label = document.getElementById(\"search-results-label\");  \n    const response = await fetch(`https://api.github.com/search/repositories?q=${query}+&sort=stars&order=desc`); \n    const data = await response.json(); \n   \n      setRepo(data.items);\n    \n     \n  }\n\n  //captrure input field values and assign to search state\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  }\n\n  // we don't want to make an api call each time someone enters a new char in our text field so we're saving those values to the search state and only search when the form button is pressed \n  // this will then copy the contents of search to query, which triggers use effects to go fetch data and update our view\n  const getSearch = e =>{\n    e.preventDefault(); \n\n    setQuery(search)\n  }\n  // flash a red border to incicate results have changed \n  const toggleBox = () => {\n    var resultsBox = document.getElementById(\"search-results\"); \n    resultsBox.classList.toggle(\"flash\");\n    setTimeout( () =>{ \n      resultsBox.classList.toggle(\"flash\");\n    }, 2000);\n  };\n  const handleClose = (e) => {\n    setShow(false);\n  }\n  const handleShow = (e) => {\n    setShow(true)\n    console.log(\"wooh\");\n  };\n\n  return (\n    <div className='App'>\n      <form className='search-form'>\n        <input className='search-bar' value= {search} onChange={updateSearch} type='text'/>\n        <button className='search-button' onClick={getSearch} type='submit'><span> </span>Search</button>\n      </form>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n        <div className=\"col-sm-12 col-md-4\" id=\"search-results\" onClick = {handleShow}>\n            <h2 id=\"search-results-label\">Search results</h2>\n            <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Repo Name</th>\n                <th scope=\"col\">Forks</th>\n            </tr>\n            </thead>\n            <tbody>\n            <RepoTable items={repo}  />\n            </tbody>\n        </table>\n          </div>\n          <div className=\"col-sm-12 col-md-4\">\n            <h2>Top Rated</h2>\n            <RepoTable items = {rated} />\n          </div>\n          <div className=\"col-sm-12 col-md-4\">\n            <h2>Most Recent</h2>\n            <RepoTable items = {recents} />\n          </div>\n       </div>\n      </div>\n        \n    <div>\n    <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n      \n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}